"""initial migration

Revision ID: 6d7f6e8d9ae7
Revises: 
Create Date: 2025-06-12 16:38:14.559354

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6d7f6e8d9ae7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('asset',
    sa.Column('fs_path', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('file_type', sa.String(length=50), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('fs_path'),
    sa.UniqueConstraint('name')
    )
    op.create_table('group',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('lexiconterm',
    sa.Column('term', sa.String(length=100), nullable=False),
    sa.Column('definition', sa.String(length=255), nullable=False),
    sa.Column('category', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('term')
    )
    op.create_table('owner',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('avatar_url', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contact',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['owner.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('samplelocation',
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('visible', sa.Boolean(), nullable=False),
    sa.Column('point', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['owner.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_samplelocation_point', 'samplelocation', ['point'], unique=False, postgresql_using='gist')
    op.create_table('assetlocation',
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['samplelocation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('equipment',
    sa.Column('equipment_type', sa.String(length=50), nullable=True),
    sa.Column('model', sa.String(length=50), nullable=True),
    sa.Column('serial_no', sa.String(length=50), nullable=True),
    sa.Column('date_installed', sa.DateTime(), nullable=True),
    sa.Column('date_removed', sa.DateTime(), nullable=True),
    sa.Column('recording_interval', sa.Integer(), nullable=True),
    sa.Column('equipment_notes', sa.String(length=50), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['samplelocation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grouplocation',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['samplelocation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spring',
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['samplelocation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('well',
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('ose_pod_id', sa.String(length=50), nullable=True),
    sa.Column('api_id', sa.String(length=50), nullable=True),
    sa.Column('usgs_id', sa.String(length=50), nullable=True),
    sa.Column('well_depth', sa.Float(), nullable=True),
    sa.Column('hole_depth', sa.Float(), nullable=True),
    sa.Column('well_type', sa.String(length=100), nullable=True),
    sa.Column('casing_diameter', sa.Float(), nullable=True),
    sa.Column('casing_depth', sa.Float(), nullable=True),
    sa.Column('casing_description', sa.String(length=50), nullable=True),
    sa.Column('construction_notes', sa.String(length=250), nullable=True),
    sa.Column('formation_zone', sa.String(length=100), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['formation_zone'], ['lexiconterm.term'], ),
    sa.ForeignKeyConstraint(['location_id'], ['samplelocation.id'], ),
    sa.ForeignKeyConstraint(['well_type'], ['lexiconterm.term'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('wellscreen',
    sa.Column('well_id', sa.Integer(), nullable=False),
    sa.Column('screen_depth_top', sa.Float(), nullable=False),
    sa.Column('screen_depth_bottom', sa.Float(), nullable=False),
    sa.Column('screen_type', sa.String(length=100), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['screen_type'], ['lexiconterm.term'], ),
    sa.ForeignKeyConstraint(['well_id'], ['well.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('wellscreen')
    op.drop_table('well')
    op.drop_table('spring')
    op.drop_table('grouplocation')
    op.drop_table('equipment')
    op.drop_table('assetlocation')
    op.drop_index('idx_samplelocation_point', table_name='samplelocation', postgresql_using='gist')
    op.drop_table('samplelocation')
    op.drop_table('contact')
    op.drop_table('user')
    op.drop_table('owner')
    op.drop_table('lexiconterm')
    op.drop_table('group')
    op.drop_table('asset')
    # ### end Alembic commands ###
